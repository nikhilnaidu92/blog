package com.axp.microdose.commercial.demographic.data.verticles

import com.axp.logging.schema.v0_1.Structured
import com.axp.microdose.commercial.demographic.data.constants.FunctionConstants.*
import com.axp.microdose.commercial.demographic.data.enums.AddressTypeEnum
import com.axp.microdose.commercial.demographic.data.enums.EntityType
import com.axp.microdose.commercial.demographic.data.enums.ErrorEnum
import com.axp.microdose.commercial.demographic.data.model.*
import com.axp.microdose.commercial.demographic.data.utils.C360FunctionUtil.*
import com.axp.microdose.commercial.demographic.data.validators.RequestValidator
import com.axp.microdose.commons.MicrodoseConstants
import com.axp.microdose.commons.MicrodoseConstants.TRACE_LOG_MESSAGE
import com.axp.microdose.commons.tracing.TracerUtil
import io.vertx.core.MultiMap
import io.vertx.core.eventbus.Message
import io.vertx.core.json.JsonArray
import io.vertx.core.json.JsonObject
import org.apache.http.HttpStatus
import java.util.*

class CreateCommercialDemographicDataVerticle : BaseVerticle() {

    override suspend fun handle(message: Message<JsonObject>, messageMarker: Structured) {
        val eventSpan = TracerUtil.createAndStartSpan(getFunctionAddress(), message.headers())

        runCatching {
            val requestBody = message.body()
            val requestHeaders: MultiMap = message.headers()
            val authConfig = getLambdaConfig().getJsonObject(A2A_CONFIG)
            val scopes = extractScopes(authConfig)
            log.info(messageMarker, "Received request: {}, {}", requestBody, requestHeaders)

            val (request, errors) = RequestValidator.validateCreateDataRequest(requestBody, requestHeaders, messageMarker)
            if (errors.isNotEmpty()) {
                sendErrorResponse(message, HttpStatus.SC_BAD_REQUEST, CODE_400, errors, eventSpan)
                return
            }

            prepareAccountObjectIfNeeded(request)
            val readSorResponse = fetchDataFromSOR(message, messageMarker, request, scopes)
            handleReadSORResponse(readSorResponse, request, message, messageMarker, eventSpan) ?: return

            handleEmailRequestId(request, message, messageMarker, scopes) ?: return
            val shouldUpdateC360 = isNsdPassed(request)

            val c360Response = fetchC360DataIfNeeded(request, message, messageMarker, scopes)
            val (entity, categoryCode) = processC360Response(c360Response, request, message, messageMarker, eventSpan) ?: return

            val createSorRequest = buildCreateDataSorRequest(request)
            val createSorResponse = callCreateSOR(message, messageMarker, scopes, createSorRequest)
            handleCreateSORResponse(createSorResponse, shouldUpdateC360, request, categoryCode, message, messageMarker, eventSpan)

        }.onFailure { exception ->
            handleException(message, messageMarker, eventSpan, exception)
        }
    }

    private fun extractScopes(authConfig: JsonObject): List<String> =
        authConfig.getJsonArray(SCOPES)?.map { it.toString() } ?: emptyList()

    private fun prepareAccountObjectIfNeeded(request: CreateCommercialDemographicDataRequest) {
        if (request.account == null && request.accountToken != null) {
            request.account = Account(request.accountToken!!, CM15)
        }
    }

    private fun fetchDataFromSOR(
        message: Message<JsonObject>,
        messageMarker: Structured,
        request: CreateCommercialDemographicDataRequest,
        scopes: List<String>
    ) = callOneDataFunction(
        getDependentAddress(READ_SOR_FILE),
        createA2AHeaders(message.headers(), messageMarker, scopes),
        JsonObject(gson.toJson(buildReadDataSorRequest(request))),
        messageMarker
    )

    private fun handleReadSORResponse(
        response: Response,
        request: CreateCommercialDemographicDataRequest,
        message: Message<JsonObject>,
        messageMarker: Structured,
        eventSpan: Span
    ): Boolean? {
        return when (response.headers[MicrodoseConstants.HTTP_STATUS_CODE].toInt()) {
            HttpStatus.SC_OK -> processSuccessfulReadSOR(response, request, messageMarker)
            HttpStatus.SC_NO_CONTENT -> {
                log.info(messageMarker, "Read SOR returned empty response.")
                true
            }
            else -> {
                sendErrorResponse(message, response.headers[MicrodoseConstants.HTTP_STATUS_CODE].toInt(), response.body, eventSpan)
                null
            }
        }
    }

    private fun processSuccessfulReadSOR(
        response: Response,
        request: CreateCommercialDemographicDataRequest,
        messageMarker: Structured
    ) {
        val sorData = gson.fromJson(response.body.toString(), ReadCommercialDemographicDataSorResponses::class.java).applications[0]
        if (request.useLastApplicationData == true || request.applicationId != null) {
            copyExistingData(request, sorData)
        } else {
            log.warn(messageMarker, "Dodd-Frank data already exists for the given request ID/reference number.")
            return null
        }
        return true
    }

    private fun copyExistingData(request: CreateCommercialDemographicDataRequest, sorData: ReadCommercialDemographicDataSorResponse) {
        request.apply {
            account = sorData.account
            businessOwnershipStatus = sorData.businessOwnershipStatus
            numberOfPrincipalOwners = sorData.numberOfPrincipalOwners
            principalOwners = sorData.principalOwners
            entity = sorData.entity
            companyName = sorData.companyName
        }
    }

    private fun handleEmailRequestId(
        request: CreateCommercialDemographicDataRequest,
        message: Message<JsonObject>,
        messageMarker: Structured,
        scopes: List<String>
    ): Boolean? {
        if (request.requestId != null) {
            val emailSorResponse = callOneDataFunction(
                getDependentAddress(READ_EMAIL_SOR_FILE),
                createA2AHeaders(message.headers(), messageMarker, scopes),
                JsonObject(gson.toJson(ReadCommercialDemographicEmailSorRequest(request.requestId))),
                messageMarker
            )
            return processEmailSORResponse(emailSorResponse, request, message, messageMarker)
        }
        return true
    }

    private fun processEmailSORResponse(
        response: Response,
        request: CreateCommercialDemographicDataRequest,
        message: Message<JsonObject>,
        messageMarker: Structured
    ): Boolean {
        return if (response.headers[MicrodoseConstants.HTTP_STATUS_CODE].toInt() == HttpStatus.SC_OK && response.body != null) {
            val emailData = gson.fromJson(response.body.toString(), EmailResponses::class.java).requests[0]
            copyEmailData(request, emailData)
            true
        } else {
            sendErrorResponse(message, HttpStatus.SC_BAD_REQUEST, CODE_400, ErrorEnum.INVALID_REQUEST_ID.errorMessage)
            false
        }
    }

    private fun copyEmailData(request: CreateCommercialDemographicDataRequest, emailData: EmailResponse) {
        request.apply {
            account = emailData.account
            companyName = emailData.companyName
            entity = emailData.entity
            referenceNumber = emailData.referenceNumber
        }
    }

    private fun fetchC360DataIfNeeded(
        request: CreateCommercialDemographicDataRequest,
        message: Message<JsonObject>,
        messageMarker: Structured,
        scopes: List<String>
    ): Response? {
        return if (request.account != null) {
            callOneDataFunction(
                getDependentAddress(READ_C360),
                createA2AHeaders(message.headers(), messageMarker, scopes),
                JsonObject(gson.toJson(buildReadC360Request(request.account!!.id, request.account!!.type))),
                messageMarker
            )
        } else null
    }

    private fun processC360Response(
        response: Response?,
        request: CreateCommercialDemographicDataRequest,
        message: Message<JsonObject>,
        messageMarker: Structured,
        eventSpan: Span
    ): Pair<String, String>? {
        if (response?.body == null) {
            sendErrorResponse(message, HttpStatus.SC_BAD_REQUEST, CODE_400, ErrorEnum.INVALID_ACCOUNT_ID.errorMessage, eventSpan)
            return null
        }

        val c360Data = gson.fromJson(response.body.toString(), ReadCustomerIdentityAndRelationshipResponse::class.java)
        val (entity, categoryCode) = fetchEntityIdAndCategoryCode(c360Data)
        if (entity != null && categoryCode != null) {
            request.entity = entity
            return Pair(entity, categoryCode)
        } else {
            sendErrorResponse(message, HttpStatus.SC_BAD_REQUEST, CODE_400, ErrorEnum.MISSING_ENTITY_ID_IN_C360.errorMessage, eventSpan)
            return null
        }
    }

    private fun callCreateSOR(
        message: Message<JsonObject>,
        messageMarker: Structured,
        scopes: List<String>,
        createSorRequest: CreateCommercialDemographicDataSorRequest
    ): Response {
        return callOneDataFunction(
            getDependentAddress(CREATE_SOR_FILE),
            createA2AHeaders(message.headers(), messageMarker, scopes),
            createSorRequest.toJson(),
            messageMarker
        )
    }

    private fun handleCreateSORResponse(
        response: Response,
        shouldUpdateC360: Boolean,
        request: CreateCommercialDemographicDataRequest,
        categoryCode: String?,
        message: Message<JsonObject>,
        messageMarker: Structured,
        eventSpan: Span
    ) {
        if (response.headers[MicrodoseConstants.HTTP_STATUS_CODE].toInt() in listOf(HttpStatus.SC_OK, HttpStatus.SC_CREATED)) {
            log.info(messageMarker, "Create SOR successful.")
            if (shouldUpdateC360) {
                updateC360(request, categoryCode, messageMarker)
            }
            sendSuccessResponse(message, response, eventSpan)
        } else {
            sendErrorResponse(message, response.headers[MicrodoseConstants.HTTP_STATUS_CODE].toInt(), response.body, eventSpan)
        }
    }

    private fun updateC360(
        request: CreateCommercialDemographicDataRequest,
        categoryCode: String?,
        messageMarker: Structured
    ) {
        if (request.entity?.type != EntityType.CRO_ID.name && request.account != null) {
            callOneDataFunctionWithArray(
                getDependentAddress(UPDATE_C360),
                createA2AHeaders(message.headers(), messageMarker),
                JsonArray(gson.toJson(buildC360UpdateRequest(categoryCode!!, request))),
                messageMarker
            )
            log.info(messageMarker, "C360 update successful.")
        }
    }

    private fun sendSuccessResponse(
        message: Message<JsonObject>,
        response: Response,
        eventSpan: Span
    ) {
        message.reply(response.body)
        eventSpan.finish()
    }

    private fun sendErrorResponse(
        message: Message<JsonObject>,
        statusCode: Int,
        errorBody: Any?,
        eventSpan: Span
    ) {
        message.reply(JsonObject(mapOf("statusCode" to statusCode, "error" to errorBody)))
        eventSpan.finish()
    }

    private fun handleException(
        message: Message<JsonObject>,
        messageMarker: Structured,
        eventSpan: Span,
        exception: Throwable
    ) {
        log.error(messageMarker, "Request failed with an exception: {}", exception)
        TracerUtil.finishSpanWithFailure(eventSpan, exception)
        message.reply(JsonObject(mapOf("statusCode" to HttpStatus.SC_INTERNAL_SERVER_ERROR, "error" to exception.message)))
    }
}
